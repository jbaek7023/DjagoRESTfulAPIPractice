README
.gitignore <- copy and paste
vagrant init

#confiure Vagrantfile <-just copy and paste

vagrant up

#connect to the server
vagrant ssh
cd /vagrant

exit ...

@home, mkvirtualenv profiles_api --python=python3
deactivate
workon profiles_api
pip install django==1.11
pip install djangorestframework==3.6.2
pip freeze

create src
django-admin.py startproject profiles_project
python manage.py startapp profiles_api

---Installed apps
    'rest_framework',
    'rest_framework.authtoken',
    'profiles_api',

save requirements

// profiles_api/models.py
// settings.py

----------------------------------
APIView -> make API end-point
-APIView Uses standard HTTP methods for functions: GET, POST,PUT, PATCH, DELETE
Gives you the most control over the logic
-When to use APIViews?
full control over the logic, process ing files, and rendering API,
When you're calling other APIs/services,
Accessing local files or data

*PUT : CREATE or UPDATE
*PATCH:

---------------------------------
Viewsets -> logic for end-point
List, Create, Retrieve, Update, Partial Update, Deletes
-When to use Viewsets?
You need a sunoke CRUD interface
u want a quick and simple API.
U don't need customzation on the Logic
working on standard data structures

----------------
Build Plan
/api/profile - list all profiles
GET( list profiles)
POST(create profiles)

/api/profile/<profile_id> - manage specific Profile
- GET ( view specific Profile)
- PUT/ PATCH (update profile)
-DELETE ( remove profile)
